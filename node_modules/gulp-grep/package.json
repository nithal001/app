{
  "name": "gulp-grep",
  "description": " A gulp plugin for filtering stream objects matching certain conditions",
  "version": "0.1.6",
  "homepage": "https://github.com/demisx/gulp-grep",
  "repository": {
    "type": "git",
    "url": "git@github.com:demisx/gulp-grep.git"
  },
  "author": {
    "name": "Dmitri Moore",
    "url": "https://github.com/demisx"
  },
  "main": "index.js",
  "scripts": {
    "test": "gulp unit"
  },
  "keywords": [
    "gulpplugin",
    "filter",
    "grep"
  ],
  "dependencies": {
    "lodash": "^2.4.1",
    "log4js": "^0.6.20",
    "minimatch": "^1.0.0",
    "through2": "^0.6.1"
  },
  "devDependencies": {
    "chai": "^1.9.1",
    "coffee-script": "^1.8.0",
    "gulp": "^3.8.7",
    "gulp-coffee": "^2.2.0",
    "gulp-coffeelint": "^0.3.4",
    "gulp-mocha": "^1.0.0",
    "gulp-plumber": "^0.6.5",
    "gulp-rimraf": "^0.1.0",
    "gulp-using": "0.0.1",
    "gulp-util": "^3.0.1",
    "gulp-watch": "^0.7.0"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/demisx/gulp-grep/raw/master/LICENSE"
    }
  ],
  "readme": "gulp-grep\n============\n\nA [gulp](https://github.com/gulpjs/gulp) plugin for filtering out file objects \nfrom the stream based on a glob match or a conditional function.\n\n## Usage\n\n### Use case 1\nFilter in file objects matching certain criteria and perform some actions on them.\n\n```js\n// via a conditional function\nvar grep = require('gulp-grep'),\n  deletedFilesFilter = grep(function(file) {\n    return file.event === 'deleted';\n  })\n\ngulp.src(['app/**/*.*'], { read: false }) // set `read` to false if you don't want to read file contents\n  .pipe(deletedFilesFilter)\n  // only deleted files passed down from here on\n  .pipe(doSomethingOnDeletedFiles())\n  ... ... ... \n});\n```\n\n```js\n// via a glob\nvar grep = require('gulp-grep')\n\ngulp.src('app/**/*.*', { read: false }) \n  // filter in CoffeeScript files\n  .pipe(grep('**/*.coffee'))\n  // only CoffeeScript files are passed downstream from here on\n  .pipe(doSomethingOnCoffeeFiles())\n  ... ... ... \n});\n```\n\n### Use case 2\nFilter in file objects matching certain criteria, perform some actions on them, then\nrestore filtered-out file objects downstream to perform additional actions on them too.\n\n**Please note**:\n* the stream filter needs to be created as `{restorable: true}` in\norder to be able to restore the filetered out by this filter objects later in the stream pipeline.\n* if you don't pipe `allFilesFilter` in the example below prior to restoring \nfiltered-out objects, the latter will be joined with the \nfiltered-in objects and passed downstream together.\n\n```js\n// via a glob\nvar grep = require('gulp-grep'),\n  coffee = require('gulp-coffee'),\n  coffeeScriptFilter = grep(['**/*.coffee','!**/*-test.coffee'], { restorable: true }),\n  htmlFilter = grep('**/*.html'),\n  allFilesFilter = grep('**/*.*')\n\ngulp.src(['app/**/*.*', 'test/*.js'],  { read: false })\n  // filter in CoffeeScript files\n  .pipe(coffeeScriptFilter)\n  // perform some actions on filtered-in CoffeScript files\n  .pipe(coffee())\n  ... ... ... \n  // include this if you don't want coffee files passing downstream\n  .pipe(allFilesFilter)\n  // restore files previously filtered-out by `coffeeScriptFilter`\n  .pipe(coffeeScriptFilter.restoreFilteredOut())\n  // Filter in html files\n  .pipe(htmlFilter)\n  // perform some actions on filered in html files\n  .pipe(html())\n  ... ... ...\n});\n```\n\n\n## API\n\n```\ngrep(pattern [, options])\n```\n\n* `pattern` := String | Array | Function\nThe pattern that you want to match against the file objects passing \nthrough the stream. It can be a string, array or a conditional function. \nString or array must be given as glob patterns (see [node-glob](https://github.com/isaacs/node-glob) for\nexample of patterns). If specifying the pattern as a conditional `function` it will be\ncalled with a `file` object and it needs to return `true` or `false` for including\nor excluding this `file` object from the stream respectively.\n* `options`\n  * `restorable` := true | false (default)\n  Set this option to true if you want to be able to restore filtered-out\n  objects downstream later on\n  * `debug` := true | false (default)\n  Set this option to true if you want to turn in debuging mode and see what\n  exactly is going on under the hood.\n  * `...` any other option is passed through to [minmatch](https://github.com/isaacs/minimatch)\n  module\n\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/demisx/gulp-grep/issues"
  },
  "_id": "gulp-grep@0.1.6",
  "_from": "gulp-grep@0.1.6"
}
