{
  "name": "phantomas",
  "version": "1.12.0",
  "author": {
    "name": "macbre",
    "email": "maciej.brencz@gmail.com",
    "url": "http://macbre.net"
  },
  "description": "PhantomJS-based web performance metrics collector",
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/macbre/phantomas.git"
  },
  "keywords": [
    "high performance web sites",
    "metrics",
    "monitoring",
    "phantomas",
    "phantomjs",
    "web development",
    "webperf"
  ],
  "license": "BSD",
  "engines": {
    "node": ">=0.10"
  },
  "dependencies": {
    "analyze-css": "0.10.x",
    "ansicolors": "~0.3.2",
    "ansistyles": "~0.1.0",
    "ascii-table": "0.0.8",
    "async": "^1.2.0",
    "csv-string": "^2.3.0",
    "debug": "^2.2.0",
    "elasticsearch": "^4.1.0",
    "glob": "^5.0.10",
    "http-server": "^0.8.0",
    "js-yaml": "^3.1.0",
    "node-statsd": "0.1.1",
    "node-uuid": "~1.4.1",
    "optimist": "0.6.x",
    "phantomjs": "^1.9.15",
    "phantomjs2": "macbre/phantomjs2-npm#version-2.0",
    "progress": "~1.1.4",
    "q": "^1.4.1",
    "slimerjs": "^0.9.5",
    "tap": "^0.7.1",
    "tap-eater": ">=0.0.1",
    "travis-fold": ">=0.1.2"
  },
  "devDependencies": {
    "glob": "^4.3.1",
    "http-server": "^0.7.2",
    "js-beautify": "^1.5.4",
    "jshint": "^2.5.10",
    "mockery": "^1.4.0",
    "vows": "^0.7.0"
  },
  "optionalDependencies": {},
  "bin": {
    "phantomas": "./bin/phantomas.js"
  },
  "preferGlobal": true,
  "scripts": {
    "test": "PHANTOMAS_ENGINE=webkit vows --spec && PHANTOMAS_ENGINE=webkit2 vows --spec",
    "unit-test": "vows test/modules/*-test.js --spec",
    "lint": "jshint --verbose core/ modules/ scripts/ test/*.js test/*/*-test.js lib/*.js lib/metadata/*.js reporters/",
    "beautify": "js-beautify -r bin/phantomas.js core/*.js examples/*.js extensions/*/*.js lib/*.js lib/engines/*.js lib/metadata/*.js modules/*/*.js reporters/*.js scripts/*.js test/*.js test/*/*.js",
    "metadata": "DEBUG=* node lib/metadata/generate.js"
  },
  "jshintConfig": {
    "node": true,
    "-W020": false,
    "-W030": false
  },
  "readme": "phantomas\n=========\n\n![GitHub Logo](http://upload.wikimedia.org/wikipedia/en/a/a5/Fantomas.jpg)\n\nPhantomJS-based modular web performance metrics collector. And why phantomas? Well, [because](http://en.wikipedia.org/wiki/FantÃ´mas) :)\n\n[![NPM version](https://badge.fury.io/js/phantomas.png)](http://badge.fury.io/js/phantomas)\n[![Build Status](https://api.travis-ci.org/macbre/phantomas.png?branch=devel)](http://travis-ci.org/macbre/phantomas)\n\n[![Download stats](https://nodei.co/npm/phantomas.png?downloads=true&downloadRank=true)](https://nodei.co/npm/phantomas/)\n\n\n## Requirements\n\n* [NodeJS](http://nodejs.org)\n* [PhantomJS 1.9+](http://phantomjs.org/)\n\n## Installation\n\n```\nnpm install --global phantomas\n```\n\n> This will install the latest version of PhantomJS and add a symlink called ``phantomas`` (pointing to ``./bin/phantomas.js``) to your system's ``PATH``\n\nYou may need to install libfontconfig by running ``sudo apt-get install libfontconfig1``.\n\n### Development version\n\nTo get the latest development version of phantomas (and install all required dependencies):\n\n```\ngit clone git@github.com:macbre/phantomas.git\nnpm install\n```\n\n## Libraries\n\nphantomas is written in JavaScript, but you can experience it in different languages as well ;)\n\n### Python\n\n[![Latest Version](https://pypip.in/version/phantomas/badge.svg?style=flat)](https://pypi.python.org/pypi/phantomas/)\n[![Supported Python versions](https://pypip.in/py_versions/phantomas/badge.svg?style=flat)](https://pypi.python.org/pypi/phantomas/)\n\n```\npip install phantomas\n```\n\n## Features\n\n* modular approach - each metric is generated by a separate \"module\"\n* phantomas \"core\" acts as an [events emitter](https://github.com/macbre/phantomas/wiki/Events) that each module can hook into\n* in-depth metrics such as: number of events bound via jQuery, calls to ``window.write``or [complex and duplicated CSS selectors (via analyze-css)](https://github.com/macbre/analyze-css)\n* JSON and CSV as available output formats for easy integration with automated reporting / monitoring tools\n* easy integration with Continuous Integration tools via TAP format and assertions handling\n* metrics can be sent via StatsD or stored in elasticsearch\n* easy integration with other nodejs projects via CommonJS module ([see API docs](https://github.com/macbre/phantomas/wiki/npm-module))\n* metrics can be emitted from JavaScript code of the page phantomas is run against (thanks to [helper functions available in window.__phantomas](https://github.com/macbre/phantomas/wiki/Phantomas-scope))\n* device profiles allow phantomas to emulate mobile or tablet (by setting a proper user agent and viewport)\n* ability to run phantomas using WebKit (PhantomJS) or Gecko (SlimerJS) engine (experimental)\n\n## Contributors\n\n> All the [contributors](https://github.com/macbre/phantomas/graphs/contributors)\n\n* [macbre](https://github.com/macbre)\n* [sjhcockrell](https://github.com/sjhcockrell)\n* [jgonera](https://github.com/jgonera)\n* [william-p](https://github.com/william-p)\n* [gmetais](https://github.com/gmetais)\n* [vgangan](https://github.com/vgangan)\n* [cphoover](https://github.com/cphoover)\n* [wladekb](https://github.com/wladekb)\n* [iNem0o](https://github.com/iNem0o)\n* [gomezd](https://github.com/gomezd)\n* [stefanjudis](https://github.com/stefanjudis)\n\n## Usage\n\n> phantomas comes as both command line tool and CommonJS module ([see API docs](https://github.com/macbre/phantomas/wiki/npm-module)) that you can use in your nodejs projects.\n\n### Single run\n\n``` bash\nphantomas https://github.com/macbre/phantomas --verbose\n```\n\nYou can measure the performance of your site without requests to 3rd party domains (but allowing CDN that serves your static assets):\n\n```bash\nphantomas https://github.com/macbre/phantomas --verbose --no-externals --allow-domain .fastly.net\n```\n\n#### Parameters\n\n* `--reporter=[json|csv|tap|plain|statsd|elasticsearch]` results reporter aka format (``plain`` is the default one)\n* `--timeout=[seconds]` timeout for phantomas run (defaults to 15 seconds)\n* `--viewport=[width]x[height]` phantomJS viewport dimensions (1280x1024 is the default)\n* `--verbose` writes debug messages to the console\n* `--debug` run PhantomJS in debug mode\n* `--engine` select engine used to run the phantomas ``[webkit|gecko]`` **experimental**\n* `--colors` forces ANSI colors even when output is piped (e,g. via ``less -r``)\n* `--silent` don't write anything to the console\n* `--progress` shows page loading progress bar (disables verbose mode)\n* `--log=[log file]` log to a given file\n* `--modules=[moduleOne],[moduleTwo]` run only selected modules\n* `--include-dirs=[dirOne],[dirTwo]` load modules from specified directories\n* `--skip-modules=[moduleOne],[moduleTwo]` skip selected modules\n* `--user-agent='Custom user agent'` provide a custom user agent (will default to something similar to ``phantomas/0.6.0 (PhantomJS/1.9.0; linux 64bit)``)\n* `--config=[JSON/YAML config file]` uses JSON or YAML-formatted config file to set parameters\n* `--cookie='bar=foo;domain=url'` document.cookie formatted string for setting a single cookie\n* `--cookies-file=[JAR file]` specifies the file name to store the persistent Cookies\n* `--no-externals` block requests to 3rd party domains\n* `--allow-domain=[domain],[domain]` allow requests to given domain(s) - aka whitelist\n* `--block-domain=[domain],[domain]` disallow requests to given domain(s) - aka blacklist\n* `--auth-user` sets the user name used for HTTP authentication\n* `--auth-pass` sets the password used for HTTP authentication\n* `--disable-js` disable JavaScript on the page that will be loaded\n* `--analyze-css` emit in-depth CSS metrics **experimental**\n* `--film-strip` register film strip when page is loading **experimental**\n* `--film-strip-dir=[dir path]` folder path to output film strip (default is ``./filmstrip`` directory)\n* `--film-strip-prefix` film strip files name prefix (defaults to ``screenshot``)\n* `--page-source` save page source to file **experimental**\n* `--page-source-dir=[dir path]` folder path to output page source (default is ``./html`` directory) **experimental**\n* `--assert-[metric-name]=value` assert that given metric should be less or equal the value\n* `--screenshot=[file name]` render fully loaded page to a given file\n* `--har=[file name]` save HAR to a given file\n* `--wait-for-event=[phantomas event name]` wait for a given phantomas event before generating a report, timeout setting still applies (e.g. ``--wait-for-event \"done\"``)\n* `--wait-for-selector=[CSS selector]` wait for an element matching given CSS selector before generating a report, timeout setting still applies (e.g. ``--wait-for-selector \"body.loaded\"``)\n* `--stop-at-onload` stop phantomas **immediately after `onload` event**\n* `--scroll` scroll down the page when it''s loaded\n* `--post-load-delay=[seconds]` wait X seconds before generating a report, timeout setting still applies\n* `--ignore-ssl-errors` ignores SSL errors, such as expired or self-signed certificate errors\n* `--ssl-protocol` sets the SSL protocol for secure connections ``[sslv3|sslv2|tlsv1|any]``\n* `--proxy=[host:port]` specifies the proxy server to use\n* `--proxy-auth=[username:password]` specifies the authentication information for the proxy\n* `--proxy-type=[http|socks5|none]` specifies the type of the proxy server (default is http)\n* `--phone` force viewport and user agent of a mobile phone\n* `--tablet` force viewport and user agent of a tablet\n* `--spy-eval` report calls to eval()\n\n### Multiple runs\n\nSimply provide ``--runs`` option:\n\n``` bash\nphantomas https://github.com/macbre/phantomas --verbose --runs 5\n```\n\nOnly ``plain`` (the default one) and ``json`` reporters are currently supported in multiple runs mode.\n\n## Metrics\n\n_Current number of metrics: 135_\n\nUnits:\n\n* ms for time\n* bytes for size\n\n### Requests monitor (core module)\n\n> Due to [PhantomJS issue #10156](https://github.com/ariya/phantomjs/issues/10156) **body size related metrics are not reliable**\n\n* requests: total number of HTTP requests made\n* gzipRequests: number of gzipped HTTP responses\n* postRequests: number of POST requests\n* httpsRequests: number of HTTPS requests\n* notFound: number of HTTP 404 responses\n* timeToFirstByte: time it took to receive the first byte of the first response (that was not a redirect)\n* timeToLastByte: time it took to receive the last byte of the first response (that was not a redirect)\n* bodySize: size of the content of all responses\n* contentLength: size of the content of all responses (based on ``Content-Length`` header)\n* httpTrafficCompleted: time it took to receive the last byte of the last HTTP response\n\n### AJAX requests\n\n* ajaxRequests: number of AJAX requests\n\n### Assets types\n\n> Due to [PhantomJS issue #10156](https://github.com/ariya/phantomjs/issues/10156) **body size related metrics are not reliable**\n\n* htmlCount: number of HTML responses\n* htmlSize: size of HTML responses\n* cssCount: number of CSS responses\n* cssSize: size of CSS responses\n* jsCount: number of JS responses\n* jsSize: size of JS responses\n* jsonCount: number of JSON responses\n* jsonSize: size of JSON responses\n* imageCount: number of image responses\n* imageSize: size of image responses\n* webfontCount: number of web font responses\n* webfontSize: size of web font responses\n* videoCount: number of video responses\n* videoSize: size of video responses\n* base64Count: number of base64 encoded \"responses\" (no HTTP request was actually made)\n* base64Size: size of base64 encoded \"responses\"\n* otherCount: number of other responses\n* otherSize: size of other responses\n\n### Cache Hits\n\n> Metrics are calculated based on ``Age`` and ``X-Cache`` headers added by Varnish  / Squid servers\n\n* cacheHits: number of cache hits\n* cacheMisses: number of cache misses\n* cachePasses: number of cache passes\n\n### Headers\n\n* headersCount: number of requests and responses headers\n* headersSentCount: number of headers sent in requests\n* headersRecvCount: number of headers received in responses\n* headersSize: size of all headers\n* headersSentSize: size of sent headers\n* headersRecvSize: size of received headers\n* headersBiggerThanContent: number of responses with headers part bigger than the response body\n\n### Domains\n\n* domains: number of domains used to fetch the page\n* maxRequestsPerDomain: maximum number of requests fetched from a single domain\n* medianRequestsPerDomain: median of requests fetched from each domain\n\n### Cookies\n\n* cookiesSent: length of cookies sent in HTTP requests\n* cookiesRecv: length of cookies received in HTTP responses\n* domainsWithCookies: number of domains with cookies set\n* documentCookiesLength: length of `document.cookie`\n* documentCookiesCount: number of cookies in `document.cookie`\n\n### DOM complexity\n\n> Metrics listed below are generated after the full page load\n\n* globalVariables: number of JS globals variables\n* globalVariablesFalsy: number of JS global variables that cast to false\n* bodyHTMLSize: the size of body tag content (``document.body.innerHTML.length``)\n* commentsSize: the size of HTML comments on the page\n* whiteSpacesSize: the size of text nodes with whitespaces only\n* DOMelementsCount: total number of HTML element nodes\n* DOMelementMaxDepth: maximum level on nesting of HTML element node\n* DOMidDuplicated: number of duplicated IDs found in DOM\n* iframesCount: number of iframe nodes\n* nodesWithInlineCSS: number of nodes with inline CSS styling (with `style` attribute)\n* imagesScaledDown: number of <img> nodes that have images scaled down in HTML\n* imagesWithoutDimensions: number of ``<img>`` nodes without both ``width`` and ``height`` attribute\n\n### DOM hidden content\n\n* hiddenContentSize: the size of content of hidden elements on the page (with CSS ``display: none``)\n* hiddenImages: number of hidden images that can be lazy-loaded\n\n### DOM queries\n\n* DOMqueries: the sum of all four metrics below\n* DOMqueriesWithoutResults: number of DOM queries that returned nothing\n* DOMqueriesById: number of `document.getElementById` calls\n* DOMqueriesByClassName: number of `document.getElementsByClassName` calls\n* DOMqueriesByTagName: number of `document.getElementsByTagName` calls\n* DOMqueriesByQuerySelectorAll: number of `document.querySelectorAll` calls\n* DOMinserts: number of DOM nodes inserts\n* DOMqueriesDuplicated: number of DOM queries called more than once\n* DOMqueriesAvoidable: number of repeated uses of a duplicated query\n\n### DOM mutations\n\n> These metrics are only available when running phantomas using **Gecko engine** (``--engine=gecko``)\n\n* DOMmutationsInserts: number of node inserts\n* DOMmutationsRemoves: number of node removes\n* DOMmutationsAttributes: number of DOM nodes attributes changes\n\n### Event listeners\n\n* eventsBound: number of ``EventTarget.addEventListener`` calls\n* eventsDispatched: number of ``EventTarget.dispatchEvent`` calls\n* eventsScrollBound: number of `scroll` event bounds to `window` or `document`\n\n### Window performance\n\n> Times below are relative to ``responseEnd`` entry in NavigationTiming (represented by ``timeToLastByte`` metric). See [NavigationTiming spec](http://w3c-test.org/webperf/specs/NavigationTiming/) for more information.\n\n* domInteractive: time it took to parse the HTML and construct the DOM\n* domContentLoaded: time it took to construct both DOM and CSSOM, no stylesheets are blocking JavaScript execution (i.e. onDOMReady)\n* domContentLoadedEnd: time it took to finish handling of onDOMReady event **experimental**\n* domComplete: time it took to load all page resources, the loading spinner has stopped spinning\n* timeBackend: time to the first byte compared to the total loading time (in %)\n* timeFrontend: time to window on load compared to the total loading time (in %)\n\n### Repaints\n\n> These metrics are only available when running phantomas using **Gecko engine** (``--engine=gecko``)\n\n* repaints: [number of repaints](https://developer.mozilla.org/en-US/docs/Web/API/Window.mozPaintCount) of the current document\n* firstPaint: time it took to perform the first paint (time is relative to ``responseEnd`` event)\n\n### Requests statistics\n\n> **Time** is total duration, from the start of the request to the receipt of the final byte in the response. **Latency** is the time to load the first byte in the response.\n> https://developers.google.com/chrome-developer-tools/docs/network\n>\n> Includes ``HTTP 200`` responses only\n\n* smallestResponse: the size of the smallest response\n* biggestResponse: the size of the biggest response\n* fastestResponse: the time to the last byte of the fastest response\n* slowestResponse: the time to the last byte of the slowest response\n* smallestLatency: the time to the first byte of the fastest response\n* biggestLatency: the time to the first byte of the slowest response\n* medianResponse: median value of time to the last byte for all responses\n* medianLatency: median value of time to the first byte for all responses\n\n### Requests to\n\n* requestsToFirstPaint: number of HTTP requests it took to make the first paint\n* domainsToFirstPaint: number of domains used to make the first paint\n* requestsToDomContentLoaded: number of HTTP requests it took to make the page reach `DomContentLoaded` state\n* domainsToDomContentLoaded: number of domains used to make the page reach DomContentLoaded state\n* requestsToDomComplete: number of HTTP requests it took to make the page reach `DomComplete` state\n* domainsToDomComplete: number of domains used to make the page reach DomComplete state\n\n### keepAlive\n\n> Monitors the use of ``Connection: close`` and ``Keep-Alive``\n\n* closedConnections: number of requests not keeping the connection alive and slowing down the next request\n\n### localStorage\n\n* localStorageEntries: number of entries in local storage\n\n### jQuery\n\n> Requires jQuery 1.8.0+\n\n* jQueryVersion: version of jQuery framework (if loaded)\n* jQueryVersionsLoaded: number of loaded jQuery \"instances\" (even in the same version)\n* jQueryOnDOMReadyFunctions: number of functions bound to `onDOMReady` event\n* jQueryWindowOnLoadFunctions: number of functions bound to `windowOnLoad` event\n* jQuerySizzleCalls: number of calls to [Sizzle](http://sizzlejs.com/) (including those that will be resolved using ``querySelectorAll``)\n* jQueryEventTriggers: number of jQuery event triggers\n* jQueryDOMReads: number of DOM read operations\n* jQueryDOMWrites: number of DOM write operations\n* jQueryDOMWriteReadSwitches: number of read operations that follow a series of write operations (will cause repaint and can cause reflow)\n\n### Static assets\n\n* assetsNotGzipped: static assets that were not gzipped\n* assetsWithQueryString: static assets requested with query string (e.g. ?foo) in URL\n* assetsWithCookies: number of static assets requested from domains with cookie set\n* smallImages: images smaller than 2 KiB that can be base64 encoded\n* smallCssFiles: number of CSS assets smaller than 2 KiB that can be inlined or merged\n* smallJsFiles: number of JS assets smaller than 2 KiB that can be inlined or merged\n* multipleRequests: number of static assets that are requested more than once\n\n### Caching\n\n* cachingNotSpecified: responses with no caching header sent (either `Cache-Control` or `Expires`)\n* cachingTooShort: responses with too short (less than a week) caching time\n* cachingDisabled: responses with caching disabled (`max-age=0`)\n* oldCachingHeaders: responses with old, HTTP 1.0 caching headers (``Expires`` and ``Pragma``)\n\n### Time to first asset\n\n* timeToFirstCss: time it took to receive the last byte of the first CSS\n* timeToFirstJs: time it took to receive the last byte of the first JS\n* timeToFirstImage: time it took to receive the last byte of the first image\n\n### Redirects\n\n* redirects: number of HTTP redirects (either 301, 302 or 303)\n* redirectsTime: time it took to send and receive redirects\n\n### JavaScript bottlenecks\n\n* documentWriteCalls: number of calls to either ``document.write`` or ``document.writeln``\n* evalCalls: number of calls to ``eval`` (either direct or via ``setTimeout`` / ``setInterval``)\n\n### JavaScript errors\n\n> Error message and backtrace will be emitted as offenders\n\n* jsErrors: number of JavaScript errors\n\n### JavaScript console and alert\n\n* windowAlerts: number of calls to ``alert``\n* windowConfirms: number of calls to ``confirm``\n* windowPrompts: number of calls to ``prompt``\n* consoleMessages: number of calls to ``console.*`` functions\n\n### Main request\n\n> Analyzes bits of data pertaining to the main request only\n\n* statusCodesTrail: comma-separated list of HTTP status codes that main request followed through (could contain a single element if the main request is a terminal one)\n\n### Document height\n\n* [documentHeight](http://www.stevesouders.com/blog/2014/06/08/http-archive-new-stuff/): the page height in pixels\n\n### Lazy-loadable images\n\n* lazyLoadableImagesBelowTheFold: number of images displayed below the fold that can be lazy-loaded\n\n### Optional metrics\n\n> The following metrics are emitted only when certain options are passed to phantomas\n\n* blockedRequests: number of requests blocked due to domain filtering (emitted only when in `--no-externals` / `--block-domain` mode)\n\n### CSS metrics\n\n> This is an experimental feature. Use `--analyze-css` option to enable it.\n\nTake a look at [analyze-css README](https://github.com/macbre/analyze-css) for the full list of metrics.\n\n* cssParsingErrors: number of CSS files (or embeded CSS) that failed to be parse by analyze-css\n\n### Reporters\n\nphantomas provides a number of reporters that can format the run results and send them to various tools. Use ``--reporter`` (or ``-R`` shortcut) option to use one.\n\n#### Formatters\n\nResults can be emitted as TAP, CSV and JSON. ``plain`` format is most useful for human beings :)\n\n#### Parameters\n\nFormatters can be provided with colon separated list of options:\n\n```\n$ phantomas http://foo.net -R csv:no-header:timestamp\n```\n\nThis will omit CSV headers row and add current timestamp as the first column, so you can append the results line to a growing file.\n\n##### CSV\n* ``no-header`` - omit CSV header\n* ``timestamp`` - add the current timestamp as the first column\n* ``url`` - add the URL as the first column\n\n##### Elasticsearch\n* ``<host>:<port>:<index>:<type>`` - shorthand for ``--elasticsearch-*`` options\n\n##### JSON\n* ``pretty`` - emits pretty printed JSON\n\n##### Plain\n* ``no-color`` - disable ANSI colors\n\n##### StatsD\n* ``<host>:<port>:<prefix>`` - shorthand for ``--statsd-host``, ``--statsd-port`` and ``--statsd-prefix`` (you don't need to provide all three options)\n\n##### TAP\n* ``no-skip`` - don't print out metrics that were skipped\n\n#### StatsD integration\n\nMetrics from phantomas run can be sent directly to [StatsD](http://codeascraft.com/2011/02/15/measure-anything-measure-everything/) and then graphed using [graphite](http://graphite.wikidot.com/), [graphene](http://jondot.github.io/graphene/) or any other tool of your choice. For instance:\n\n```\n$ phantomas http://app.net/start -R statsd --statsd-host stats.app.net --statsd-port 8125 --statsd-prefix 'myApp.mainPage.'\n```\n\nor\n\n```\n$ phantomas http://app.net/start -R statsd:stats.app.net:8125:myApp.mainPage.\n```\n\nwill sent metrics to StatsD running on ``stats.app.net:8125`` and prefix them with 'myApp.mainPage'.\n\n#### Save metrics to Elasticsearch\n\nMetrics from phantomas run can be outputted directly in Elasticsearch :\n\n##### Parameters\n\n* `--elasticsearch-host=[ip]` Elasticsearch instance ip (default : 127.0.0.1)\n* `--elasticsearch-port=[port]` Elasticsearch instance port (default : 9200)\n* `--elasticsearch-index=[index_name]` Name of the index to use\n* `--elasticsearch-type=[type_name]` Name of the document type to use\n\nOr by using reporter options (``<host>:<port>:<index>:<type>``):\n\n```\n$ phantomas http://app.net/start -R elasticsearch:es.app.net::app:phantomas_metrics\n```\n\nNote: as ``<port>`` option was skipped a default value will be used (``9200``).\n\n## Engines\n\nphantomas can be run using [PhantomJS](http://phantomjs.org/) 1.x and [2.0](https://github.com/macbre/phantomas/pull/531) (WebKit-powered headless browser) or [SlimerJS](https://slimerjs.org/) (Gecko-based non headless browser, run using [`xfvb`](http://www.x.org/releases/X11R7.6/doc/man/man1/Xvfb.1.xhtml)).\n\nYou can choose the engine by using either:\n\n* cli option: ``--engine=[webkit|webkit2|gecko]`` or ``--webkit`` / ``--webkit2`` / ``--gecko``\n* `PHANTOMAS_ENGINE` environmental variable: e.g. `PHANTOMAS_ENGINE=webkit2`\n\n> Please note that **support for SlimerJS is experimental at this point**.\n\n### PhantomJS\n\nAll required binaries are installed by npm. No extra work needed here :)\n\n### SlimerJS\n\nIn order to use SlimerJS install the following Debian/Ubuntu packages:\n\n```\nsudo aptitude install xvfb libasound2 libgtk2.0-0\n```\n\n## For developers\n\n* [Project's wiki](https://github.com/macbre/phantomas/wiki)\n* Description of [events fired by phantomas core](https://github.com/macbre/phantomas/wiki/Events)\n* Description of [helper functions available to the browser in window.__phantomas](https://github.com/macbre/phantomas/wiki/Phantomas-scope)\n\n## Custom modules\n\nYou can load your own, custom phantomas modules using `--include-dirs` option:\n\n```\nphantomas --include-dirs /my/path/to/custom/modules/ --url http://example.com\n```\n\n> `/my/path/to/custom/modules/` directory should contain custom modules, **each in its own directory**, e.g. `/my/path/to/custom/modules/fooBar/fooBar.js`.\n\n## Let's make Web a bit faster!\n\n* [Best Practices for Speeding Up Your Web Site](http://developer.yahoo.com/performance/rules.html) (by Yahoo!)\n* [Web Performance Best Practices](https://developers.google.com/speed/docs/best-practices/rules_intro) (by Google)\n* [Writing Efficient CSS](http://developer.mozilla.org/en/Writing_Efficient_CSS) (by Mozilla)\n* [Planet Performance](http://www.perfplanet.com/) - news and views from the web performance blogosphere\n* [Performance of 3rd Party Content](http://stevesouders.com/p3pc/) (by Steve Souders)\n* [Profiling CSS for fun and profit. Optimization notes.](http://perfectionkills.com/profiling-css-for-fun-and-profit-optimization-notes/)\n\n### Slides\n\n* [Know Your Engines: How to Make Your JavaScript Fast](http://cdn.oreillystatic.com/en/assets/1/event/60/Know%20Your%20Engines_%20How%20to%20Make%20Your%20JavaScript%20Fast%20Presentation%201.pdf) (by David Mandelin from Mozilla)\n* [Velocity Conf 2013 Workshop: Avoiding Web Performance Regression](http://www.slideshare.net/marcelduran/velocity-conf-2013) (by Marcel Duran from Twitter)\n\n## Blogosphere\n\nIntroductions to phantomas and use cases:\n\n* [phantomas â PhantomJS based, modular web performance metrics generator](http://calendar.perfplanet.com/2013/phantomas/) (an article for Performance Calendar)\n* [How to Measure Frontend Performance With Grunt](http://4waisenkinder.de/blog/2013/12/22/how-to-measure-frontend-performance-with-phantomas-and-grunt/)\n* [MaxCDN Blog - Behind The Scenes: tools.maxcdn.com](http://blog.maxcdn.com/behind-scenes-tools-maxcdn-com/)\n* [Measuring frontend performance](http://www.nephila.it/en/blog/2014/10/24/measuring-frontend-performance/)\n* [Performance Budgets with Phantomas and Jenkins](http://fairl.es/2014/02/02/phantomas-performance-testing-and-jenkins/)\n* [phantomas introduced at npmawesome.com](http://npmawesome.com/posts/2014-12-01-phantomas/)\n* [Grunt.js for the Enterprise - Vol.1: Frontend Performance with Phantomas](http://www.slideshare.net/DavidAm/grunt-js-for-the-enterprise) (by David Amend)\n* [Automated Frontend Testing at DrupalCon Austin 2014](https://austin2014.drupal.org/session/automated-frontend-testing) (+video)\n* [Phantomas: Fais-moi un strip !](https://wooster.checkmy.ws/2014/01/phantomas-performance-website/) (in French)\n\n### Videos\n\n* [Sebastian Golasch: The Glitch in the Game (Front End Ops Conference 2014)](http://youtu.be/B_kwo5V6m_w?t=12m25s)\n\n## Utilities\n\nUse [grunt](http://gruntjs.com/) to automate daily dev tasks, including your's application web performance, via these great tools:\n\n* [grunt-phantomas](https://github.com/stefanjudis/grunt-phantomas)\n* [juve](https://github.com/jared-stilwell/juve)\n* [grunt-devperf](https://github.com/gmetais/grunt-devperf)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/macbre/phantomas/issues"
  },
  "_id": "phantomas@1.12.0",
  "_from": "phantomas@^1.5.0"
}
